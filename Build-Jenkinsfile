import jenkins.model.*
pipeline {
  agent any 
    environment {
                registry = "magalam87/docker-private"
		APP="simple-java-maven-app"
		GITREPO="JFLIT"
		GIT_BRANCH="${params.GIT_BRANCH}"
        ORG= "JFLIT"
		//ORG="${params.ORG}"
		//BUILD_DIR="/opt/play-app"
		RELEASE_VERSION="${params.RELEASE_VERSION}"
		RELEASE_DATE=new java.text.SimpleDateFormat('yyyyMMdd').format(new Date())
		CACHE="jubliant"
		ATR_ORG="" //need info artifactory
		APP_VERSION="${APP}.version.${BUILD_NUMBER}"
		sources="src/main"
		java_binaries="target"		
		ENABLE_PROJECT_FOLDER="${params.ENABLE_PROJECT_FOLDER}"
		SONARQUBE_SCANS="${params.SONARQUBE_SCANS}"
		FORTIFY_SCANS="${params.FORTIFY_SCANS}"
		branch_name="${params.GIT_BRANCH}"
		
   }
    
   parameters {
    	      string(name: 'APP', description: 'App name')
            booleanParam(name: 'ENABLE_PROJECT_FOLDER', defaultValue: false, description: 'Please uncheck if not want to push artifacts- to Environment Specific folder')
            string(name: 'GIT_BRANCH', defaultValue: 'dev', description: 'Git branch')
            string(name: 'ORG', defaultValue: 'JFLIT', description: 'Git org')
            string(name: 'DOCKER_TAG', description: 'docker tag')
            string(name: 'JAVA_OPTION', description: "JAVA Compiler")
            string(name: 'DEPLOYMENT_GIT_BRANCH', description: "DEPLOYMENT GIT BRANCH")
            booleanParam(name: 'SONARQUBE_SCANS', defaultValue: false, description: "sonarqube scans")
            booleanParam(name: 'FORTIFY_SCANS', defaultValue: false, description: "fortify scans")  
		 booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: "Skip Deploy") 
		
	       }
	
   stages {
   	 stage('Cleanup') {
      		steps {
        	ansiColor('xterm') {
          	deleteDir()
        	}
          }
      }
	  
	  
	  stage('Checkout') {
      		steps {
        		ansiColor('xterm') {
			script {
// Display current build information on Jenkins
			          //currentBuild.displayName = "#${env.BUILD_NUMBER} ${params.APP}:${DEPLOYMENT_MODE}"
				   currentBuild.displayName = "#${env.BUILD_NUMBER} ${params.APP}"
               			   currentBuild.description = "from ${params.GIT_BRANCH}"
          		deleteDir()		      
          		checkout scm
// Checkout app code (OOM)
          		checkout([
               		$class: 'GitSCM',
            		branches: [[ name: "${env.GIT_BRANCH}" ]],
            		doGenerateSubmoduleConfigurations: false,
            		userRemoteConfigs: [[credentialsId: 'git-access', url: "https://github.com/raghugitty/simple-java-app.git"]],
            		extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "app"]]
          		])

            }
                }
            }
        }
      stage('Build'){
			steps {
			ansiColor('xterm') {
			sh "mkdir -p ${env.CACHE}/mvn"
			script {
			//def server = Artifactory.server('Artifactory')
		
			if("${params.JAVA_OPTION}" == "openjdk8") {
         		env.buildmachine_tag = "v2"
            	} else if("${params.JAVA_OPTION}" == "openjdk11") {
              	env.buildmachine_tag = "openjdk11.0.8"
            	} else {
			    env.buildmachine_tag = "testing"
			    }
            		docker.withRegistry('', 'DTR'){
              	docker.image("magalam87/docker-private:docker-slave").inside("-v ${env.CACHE}:${env.WORKSPACE}/cache") {			
			          withCredentials([usernamePassword(credentialsId: 'jenkins-agent', passwordVariable: 'credsfilevar', usernameVariable: 'username')]) {
                   
                    dir("app"){

                            //sh "mvn clean install"
			    //sh "mkdir -p ${env.WORKSPACE}/m2"
			    sh "pwd"
		            //sh "mvn -Dmaven.repo.local=${env.WORKSPACE}/m2 clean install"
					sh "ls -l"
                 		           }


				
							}	
						}		
					}			
				}				
				}					
			}						
			}

		stage("Build Container") {
      			steps {
                      sh "pwd"
                      sh "ls -l"
                      dir("app"){
                        ansiColor('xterm') {
          				script {
					        sh 'ls'
            					//docker.withRegistry('', 'DTR'){
              					//docker.build("magalam87/java-app:${env.BUILD_NUMBER}", "--build-arg RELEASE_DATE=${RELEASE_DATE} --build-arg GIT_BRANCH=${GIT_BRANCH}  --build-arg BUILD_VERSION=${params.DOCKER_TAG} --no-cache --pull -f ${env.WORKSPACE}/app/Dockerfile .").push()
        				    //}
          				}
        			}
                      }

      				}
			    }

	    stage("start container") {
      			steps {
                      //sh "docker run -d -p 9000:8090 ghcr.io/v-mraghu/order-management-service:${env.BUILD_NUMBER}"		      
                      sh "ls -l"
		      sh "mkdir -p ${env.WORKSPACE}/zap/wrk"
                        ansiColor('xterm') {
          				script {
            					//docker.withRegistry('', 'DTR'){
              					//docker.image("owasp/zap2docker-stable").inside {
									 sh '''
									   docker stop container owasp
									   docker run --name owasp -d -p 80:8080 -v /var/lib/jenkins/workspace/java-app:/zap/wrk owasp/zap2docker-stable sh -c "./zap.sh -daemon"
									   docker exec owasp bash -c 'zap-api-scan.py -t http://172.12.7.117:9000/receivecart/swagger-ui/#/cart-receiver-controller/receiveCartUsingPOST -f openapi -r file.html'
									   '''
									    
						                // sh 'ls -lrt'
                                         //sh './zap/zap.sh -daemon - port 80'
								
								   //sh 'mkdir -p /zap/wrk'
                                          // sh 'zap-api-scan.py -t http://172.12.7.117:9000/receivecart/swagger-ui/#/cart-receiver-controller/receiveCartUsingPOST -f openapi -r file.html'

								


							//	}
        				   // }
          				}
        			}
                      

      				}
			    }		   

    
   }

}
